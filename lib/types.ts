export interface Recipe {
  id: string
  title: string
  ingredients: string[]
  instructions: string[]
  image: string
  description?: string
  nutritionalValue: {
    calories: number
    protein: number
    carbs: number
    fat: number
  }
  servings: number
  status: "all" | "private" | "to-try" | "meal-plan"
  mealPlanDate?: string
  mealTime?: "breakfast" | "lunch" | "dinner" | "morning-snack" | "afternoon-snack" | "other"
  rating?: {
    stars: number
    comment: string
  }
  followUps?: FollowUpQA[]
  variations?: RecipeVariation[]
  appliedVariationId?: string  // ID of the currently applied variation
  aiGeneratedImage?: boolean   // Flag to indicate if the image was generated by AI
  userId?: string              // ID of the user who created/owns this recipe
}

export interface FollowUpQA {
  id: string
  question: string
  answer: string
  timestamp: number
  appliedModificationId?: string  // ID of the modification applied from this follow-up
}

export interface RecipeVariation {
  id: string
  name: string
  description: string
  originalRecipeId: string
  modifiedIngredients: string[]
  modifiedInstructions: string[]
  modifiedNutritionalValue?: {
    calories: number
    protein: number
    carbs: number
    fat: number
  }
  createdAt: number
  followUpId: string  // Reference to the follow-up that created this variation
}

export type RecipeStatus = "all" | "private" | "to-try" | "meal-plan"

// User related interfaces
export interface User {
  id: string
  username: string
  email: string
  name?: string
  createdAt: number
  preferences: UserPreferences
  avatar?: string
}

export interface UserPreferences {
  dietaryRestrictions: DietaryRestriction[]
  allergies: string[]
  cookingSkillLevel: SkillLevel
  kitchenEquipment: KitchenEquipment[]
  servingSizePreference: number
  flavorPreferences: string[]
  cuisinePreferences: string[]
}

export type DietaryRestriction = 
  | "vegetarian" 
  | "vegan" 
  | "gluten-free" 
  | "dairy-free" 
  | "keto" 
  | "paleo" 
  | "low-carb" 
  | "low-fat" 
  | "pescatarian"
  | "none"
  | string;  // Allow any string for custom dietary restrictions

export type SkillLevel = "beginner" | "intermediate" | "advanced";

export interface KitchenEquipment {
  name: string
  available: boolean
}

export const COMMON_EQUIPMENT = [
  "Oven",
  "Stovetop",
  "Microwave",
  "Blender",
  "Food processor",
  "Stand mixer",
  "Slow cooker",
  "Pressure cooker",
  "Air fryer",
  "Grill",
  "Sous vide",
  "Rice cooker",
  "Cast iron skillet",
  "Dutch oven",
  "Baking sheets",
  "Instant Pot"
];

export const CUISINE_TYPES = [
  "Italian",
  "Chinese",
  "Mexican",
  "Japanese",
  "Indian",
  "Thai",
  "French",
  "Mediterranean",
  "American",
  "Middle Eastern",
  "Korean",
  "Spanish",
  "Greek",
  "Vietnamese"
];

export interface ShoppingListItem {
  id: string;
  ingredient: string;
  recipeId: string;
  recipeName: string;
  isChecked: boolean;
  addedAt: number;
}

export interface RecipeStore {
  // Recipe State
  recipes: Recipe[];
  isLoading: boolean;
  error: string | null;
  lastFetchTime: number | null;
  
  // Shopping List State
  shoppingList: ShoppingListItem[];
  
  // Recipe Actions
  addRecipe: (recipe: Recipe) => void;
  updateRecipeStatus: (id: string, status: RecipeStatus, mealPlanDate?: string) => void;
  fetchRecipes: () => Promise<void>;
  rateRecipe: (id: string, stars: number, comment: string) => void;
  addFollowUpQuestion: (recipeId: string, question: string) => Promise<void>;
  getRecipeById: (id: string) => Recipe | undefined;
  applyRecipeModification: (recipeId: string, followUpId: string, modification: RecipeVariation) => void;
  getRecipeVariations: (recipeId: string) => RecipeVariation[];
  
  // Shopping List Actions
  addToShoppingList: (recipeId: string, ingredients: string[]) => void;
  removeFromShoppingList: (itemId: string) => void;
  toggleShoppingListItem: (itemId: string) => void;
  clearShoppingList: () => void;
  clearCheckedItems: () => void;
}

export type MealTime = "breakfast" | "lunch" | "dinner" | "morning-snack" | "afternoon-snack" | "other";

// This is for display purposes
export const MEAL_TIME_LABELS: Record<MealTime, string> = {
  "breakfast": "Breakfast",
  "lunch": "Lunch",
  "dinner": "Dinner",
  "morning-snack": "Morning Snack",
  "afternoon-snack": "Afternoon Snack",
  "other": "Other"
};

// For ordering meal times in the UI
export const MEAL_TIME_ORDER: MealTime[] = [
  "breakfast",
  "morning-snack",
  "lunch",
  "afternoon-snack",
  "dinner",
  "other"
];

